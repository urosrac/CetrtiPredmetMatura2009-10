//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2443
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace sportna_dvorana {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet2 : DataSet {
        
        private sektorji_2DataTable tablesektorji_2;
        
        public DataSet2() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet2(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["sektorji_2"] != null)) {
                    this.Tables.Add(new sektorji_2DataTable(ds.Tables["sektorji_2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sektorji_2DataTable sektorji_2 {
            get {
                return this.tablesektorji_2;
            }
        }
        
        public override DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["sektorji_2"] != null)) {
                this.Tables.Add(new sektorji_2DataTable(ds.Tables["sektorji_2"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablesektorji_2 = ((sektorji_2DataTable)(this.Tables["sektorji_2"]));
            if ((this.tablesektorji_2 != null)) {
                this.tablesektorji_2.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet2.xsd";
            this.Locale = new System.Globalization.CultureInfo("sl-SI");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablesektorji_2 = new sektorji_2DataTable();
            this.Tables.Add(this.tablesektorji_2);
        }
        
        private bool ShouldSerializesektorji_2() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void sektorji_2RowChangeEventHandler(object sender, sektorji_2RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sektorji_2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnSt_sektorjev;
            
            private DataColumn columnSt_mest_za_sektor;
            
            private DataColumn columnSt_vseh_mest;
            
            private DataColumn columnSt_zasedenih_mest;
            
            private DataColumn columnDoloceni_sektorji;
            
            private DataColumn columnSektorji_v_areni;
            
            private DataColumn columnDatum;
            
            private DataColumn columnCena;
            
            private DataColumn columnVsota;
            
            internal sektorji_2DataTable() : 
                    base("sektorji_2") {
                this.InitClass();
            }
            
            internal sektorji_2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn St_sektorjevColumn {
                get {
                    return this.columnSt_sektorjev;
                }
            }
            
            internal DataColumn St_mest_za_sektorColumn {
                get {
                    return this.columnSt_mest_za_sektor;
                }
            }
            
            internal DataColumn St_vseh_mestColumn {
                get {
                    return this.columnSt_vseh_mest;
                }
            }
            
            internal DataColumn St_zasedenih_mestColumn {
                get {
                    return this.columnSt_zasedenih_mest;
                }
            }
            
            internal DataColumn Doloceni_sektorjiColumn {
                get {
                    return this.columnDoloceni_sektorji;
                }
            }
            
            internal DataColumn Sektorji_v_areniColumn {
                get {
                    return this.columnSektorji_v_areni;
                }
            }
            
            internal DataColumn DatumColumn {
                get {
                    return this.columnDatum;
                }
            }
            
            internal DataColumn CenaColumn {
                get {
                    return this.columnCena;
                }
            }
            
            internal DataColumn VsotaColumn {
                get {
                    return this.columnVsota;
                }
            }
            
            public sektorji_2Row this[int index] {
                get {
                    return ((sektorji_2Row)(this.Rows[index]));
                }
            }
            
            public event sektorji_2RowChangeEventHandler sektorji_2RowChanged;
            
            public event sektorji_2RowChangeEventHandler sektorji_2RowChanging;
            
            public event sektorji_2RowChangeEventHandler sektorji_2RowDeleted;
            
            public event sektorji_2RowChangeEventHandler sektorji_2RowDeleting;
            
            public void Addsektorji_2Row(sektorji_2Row row) {
                this.Rows.Add(row);
            }
            
            public sektorji_2Row Addsektorji_2Row(int St_sektorjev, int St_mest_za_sektor, int St_vseh_mest, int St_zasedenih_mest, string Doloceni_sektorji, string Sektorji_v_areni, string Datum, System.Double Cena, System.Double Vsota) {
                sektorji_2Row rowsektorji_2Row = ((sektorji_2Row)(this.NewRow()));
                rowsektorji_2Row.ItemArray = new object[] {
                        null,
                        St_sektorjev,
                        St_mest_za_sektor,
                        St_vseh_mest,
                        St_zasedenih_mest,
                        Doloceni_sektorji,
                        Sektorji_v_areni,
                        Datum,
                        Cena,
                        Vsota};
                this.Rows.Add(rowsektorji_2Row);
                return rowsektorji_2Row;
            }
            
            public sektorji_2Row FindByID(int ID) {
                return ((sektorji_2Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sektorji_2DataTable cln = ((sektorji_2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sektorji_2DataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnSt_sektorjev = this.Columns["St_sektorjev"];
                this.columnSt_mest_za_sektor = this.Columns["St_mest_za_sektor"];
                this.columnSt_vseh_mest = this.Columns["St_vseh_mest"];
                this.columnSt_zasedenih_mest = this.Columns["St_zasedenih_mest"];
                this.columnDoloceni_sektorji = this.Columns["Doloceni_sektorji"];
                this.columnSektorji_v_areni = this.Columns["Sektorji_v_areni"];
                this.columnDatum = this.Columns["Datum"];
                this.columnCena = this.Columns["Cena"];
                this.columnVsota = this.Columns["Vsota"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnSt_sektorjev = new DataColumn("St_sektorjev", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSt_sektorjev);
                this.columnSt_mest_za_sektor = new DataColumn("St_mest_za_sektor", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSt_mest_za_sektor);
                this.columnSt_vseh_mest = new DataColumn("St_vseh_mest", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSt_vseh_mest);
                this.columnSt_zasedenih_mest = new DataColumn("St_zasedenih_mest", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSt_zasedenih_mest);
                this.columnDoloceni_sektorji = new DataColumn("Doloceni_sektorji", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDoloceni_sektorji);
                this.columnSektorji_v_areni = new DataColumn("Sektorji_v_areni", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSektorji_v_areni);
                this.columnDatum = new DataColumn("Datum", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatum);
                this.columnCena = new DataColumn("Cena", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCena);
                this.columnVsota = new DataColumn("Vsota", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVsota);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public sektorji_2Row Newsektorji_2Row() {
                return ((sektorji_2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sektorji_2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sektorji_2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sektorji_2RowChanged != null)) {
                    this.sektorji_2RowChanged(this, new sektorji_2RowChangeEvent(((sektorji_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sektorji_2RowChanging != null)) {
                    this.sektorji_2RowChanging(this, new sektorji_2RowChangeEvent(((sektorji_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sektorji_2RowDeleted != null)) {
                    this.sektorji_2RowDeleted(this, new sektorji_2RowChangeEvent(((sektorji_2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sektorji_2RowDeleting != null)) {
                    this.sektorji_2RowDeleting(this, new sektorji_2RowChangeEvent(((sektorji_2Row)(e.Row)), e.Action));
                }
            }
            
            public void Removesektorji_2Row(sektorji_2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sektorji_2Row : DataRow {
            
            private sektorji_2DataTable tablesektorji_2;
            
            internal sektorji_2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesektorji_2 = ((sektorji_2DataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tablesektorji_2.IDColumn]));
                }
                set {
                    this[this.tablesektorji_2.IDColumn] = value;
                }
            }
            
            public int St_sektorjev {
                get {
                    try {
                        return ((int)(this[this.tablesektorji_2.St_sektorjevColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.St_sektorjevColumn] = value;
                }
            }
            
            public int St_mest_za_sektor {
                get {
                    try {
                        return ((int)(this[this.tablesektorji_2.St_mest_za_sektorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.St_mest_za_sektorColumn] = value;
                }
            }
            
            public int St_vseh_mest {
                get {
                    try {
                        return ((int)(this[this.tablesektorji_2.St_vseh_mestColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.St_vseh_mestColumn] = value;
                }
            }
            
            public int St_zasedenih_mest {
                get {
                    try {
                        return ((int)(this[this.tablesektorji_2.St_zasedenih_mestColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.St_zasedenih_mestColumn] = value;
                }
            }
            
            public string Doloceni_sektorji {
                get {
                    try {
                        return ((string)(this[this.tablesektorji_2.Doloceni_sektorjiColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.Doloceni_sektorjiColumn] = value;
                }
            }
            
            public string Sektorji_v_areni {
                get {
                    try {
                        return ((string)(this[this.tablesektorji_2.Sektorji_v_areniColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.Sektorji_v_areniColumn] = value;
                }
            }
            
            public string Datum {
                get {
                    try {
                        return ((string)(this[this.tablesektorji_2.DatumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.DatumColumn] = value;
                }
            }
            
            public System.Double Cena {
                get {
                    try {
                        return ((System.Double)(this[this.tablesektorji_2.CenaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.CenaColumn] = value;
                }
            }
            
            public System.Double Vsota {
                get {
                    try {
                        return ((System.Double)(this[this.tablesektorji_2.VsotaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesektorji_2.VsotaColumn] = value;
                }
            }
            
            public bool IsSt_sektorjevNull() {
                return this.IsNull(this.tablesektorji_2.St_sektorjevColumn);
            }
            
            public void SetSt_sektorjevNull() {
                this[this.tablesektorji_2.St_sektorjevColumn] = System.Convert.DBNull;
            }
            
            public bool IsSt_mest_za_sektorNull() {
                return this.IsNull(this.tablesektorji_2.St_mest_za_sektorColumn);
            }
            
            public void SetSt_mest_za_sektorNull() {
                this[this.tablesektorji_2.St_mest_za_sektorColumn] = System.Convert.DBNull;
            }
            
            public bool IsSt_vseh_mestNull() {
                return this.IsNull(this.tablesektorji_2.St_vseh_mestColumn);
            }
            
            public void SetSt_vseh_mestNull() {
                this[this.tablesektorji_2.St_vseh_mestColumn] = System.Convert.DBNull;
            }
            
            public bool IsSt_zasedenih_mestNull() {
                return this.IsNull(this.tablesektorji_2.St_zasedenih_mestColumn);
            }
            
            public void SetSt_zasedenih_mestNull() {
                this[this.tablesektorji_2.St_zasedenih_mestColumn] = System.Convert.DBNull;
            }
            
            public bool IsDoloceni_sektorjiNull() {
                return this.IsNull(this.tablesektorji_2.Doloceni_sektorjiColumn);
            }
            
            public void SetDoloceni_sektorjiNull() {
                this[this.tablesektorji_2.Doloceni_sektorjiColumn] = System.Convert.DBNull;
            }
            
            public bool IsSektorji_v_areniNull() {
                return this.IsNull(this.tablesektorji_2.Sektorji_v_areniColumn);
            }
            
            public void SetSektorji_v_areniNull() {
                this[this.tablesektorji_2.Sektorji_v_areniColumn] = System.Convert.DBNull;
            }
            
            public bool IsDatumNull() {
                return this.IsNull(this.tablesektorji_2.DatumColumn);
            }
            
            public void SetDatumNull() {
                this[this.tablesektorji_2.DatumColumn] = System.Convert.DBNull;
            }
            
            public bool IsCenaNull() {
                return this.IsNull(this.tablesektorji_2.CenaColumn);
            }
            
            public void SetCenaNull() {
                this[this.tablesektorji_2.CenaColumn] = System.Convert.DBNull;
            }
            
            public bool IsVsotaNull() {
                return this.IsNull(this.tablesektorji_2.VsotaColumn);
            }
            
            public void SetVsotaNull() {
                this[this.tablesektorji_2.VsotaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sektorji_2RowChangeEvent : EventArgs {
            
            private sektorji_2Row eventRow;
            
            private DataRowAction eventAction;
            
            public sektorji_2RowChangeEvent(sektorji_2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sektorji_2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
